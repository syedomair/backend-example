name: Deploy to AWS ECS Fargate

on:
  push:
    branches:
      - main
env:
  file: ../../.env_docker_example
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Debug OIDC token
        id: oidc-token
        uses: actions/github-script@v6
        with:
          script: |
            const token = await core.getIDToken('sts.amazonaws.com');
            console.log('OIDC Token:', token);
            core.setOutput('token', token);

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActionsSession
          aws-region: us-east-2
          audience: sts.amazonaws.com


      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./../../service/user_service
          dockerfile: Dockerfile
          push: true
          tags: 175716812235.dkr.ecr.us-east-2.amazonaws.com/backend-microservices/user-service-stage:latest
          build-args: |
            --build-arg logLevelEnvVar=${LOG_LEVEL}
            --build-arg databaseURLEnvVar=${DATABASE_URL}
            --build-arg portEnvVar=${PORT}
            --build-arg dBEnvVar=${DB}
            --build-arg dBMaxIdleEnvVar=${DB_MAX_IDLE}
            --build-arg dBMaxOpenEnvVar=${DB_MAX_OPEN}
            --build-arg dBMaxLifeTimeEnvVar=${DB_MAX_LIFE_TIME}
            --build-arg dBMaxIdleTimeEnvVar=${DB_MAX_IDLE_TIME}
            --build-arg zapConf=${ZAP_CONF}
            --build-arg gormConf=${GORM_CONF}
            --build-arg pprofEnable=${PPROF_ENABLE}
