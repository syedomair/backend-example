// Code generated by MockGen. DO NOT EDIT.
// Source: department/repository.go
//
// Generated by this command:
//
//	mockgen -source=department/repository.go -destination=department/mock_repository.go -package=department
//

// Package department is a generated GoMock package.
package department

import (
	reflect "reflect"

	models "github.com/syedomair/backend-microservices/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAllDepartmentDB mocks base method.
func (m *MockRepository) GetAllDepartmentDB(limit, offset int, orderby, sort string) ([]*models.Department, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDepartmentDB", limit, offset, orderby, sort)
	ret0, _ := ret[0].([]*models.Department)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllDepartmentDB indicates an expected call of GetAllDepartmentDB.
func (mr *MockRepositoryMockRecorder) GetAllDepartmentDB(limit, offset, orderby, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDepartmentDB", reflect.TypeOf((*MockRepository)(nil).GetAllDepartmentDB), limit, offset, orderby, sort)
}
